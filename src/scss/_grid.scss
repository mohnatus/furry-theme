$gap: 20px;
$columnsCount: 12;

$smallDevicesStart: 576px;
$mediumDevicesStart: 768px;
$largeDevicesStart: 992px;
$extraLargeDevicesStart: 1200px;

$spaceUnit: 1em;
$spaceRatio: (
  '1': 0.25,
  '2': 0.5,
  '3': 0.75,
  '4': 1.25,
  '5': 2,
  '6': 3.25,
  '7': 5.25,
);

@mixin small-and-up {
  @media screen and (min-width: $smallDevicesStart) {
    @content;
  }
}

@mixin medium-and-up {
  @media screen and (min-width: $mediumDevicesStart) {
    @content;
  }
}

@mixin large-and-up {
  @media screen and (min-width: $largeDevicesStart) {
    @content;
  }
}

@mixin extra-large-and-up {
  @media screen and (min-width: $extraLargeDevicesStart) {
    @content;
  }
}

@mixin cols($count) {
  width: $count * 100% / $columnsCount;
}

@mixin offset($count) {
  margin-left: $count * 100% / $columnsCount;
}

.container {
  width: 100%;
  max-width: 1300px;
  margin-left: auto;
  margin-right: auto;
  padding-left: $gap;
  padding-right: $gap;
}

.row {
  margin-left: $gap * -1 / 2;
  margin-right: $gap * -1 / 2;

  display: flex;
  flex-wrap: wrap;
}

.col {
  padding-left: $gap / 2;
  padding-right: $gap / 2;

  @for $i from 1 through $columnsCount {
    &-#{$i} {
      @include cols($i);
    }
  }

  @include small-and-up {
    @for $i from 1 through $columnsCount {
      &-sm-#{$i} {
        @include cols($i);
      }
    }
  }

  @include medium-and-up {
    @for $i from 1 through $columnsCount {
      &-md-#{$i} {
        @include cols($i);
      }
    }
  }

  @include large-and-up {
    @for $i from 1 through $columnsCount {
      &-lg-#{$i} {
        @include cols($i);
      }
    }
  }

  @include extra-large-and-up {
    @for $i from 1 through $columnsCount {
      &-xl-#{$i} {
        @include cols($i);
      }
    }
  }
}

@mixin mediaSpace($property, $prefix: '') {
  @each $size, $ratio in $spaceRatio {
    &#{$prefix}-#{$size},
    &a#{$prefix}-#{$size} {
      #{$property}: $ratio * $spaceUnit;
    }
    &t#{$prefix}-#{$size} {
      #{$property}-top: $ratio * $spaceUnit;
    }
    &b#{$prefix}-#{$size} {
      #{$property}-bottom: $ratio * $spaceUnit;
    }
    &y#{$prefix}-#{$size} {
      #{$property}-top: $ratio * $spaceUnit;
      #{$property}-bottom: $ratio * $spaceUnit;
    }
    &l#{$prefix}-#{$size} {
      #{$property}-left: $ratio * $spaceUnit;
    }
    &r#{$prefix}-#{$size} {
      #{$property}-right: $ratio * $spaceUnit;
    }
    &x#{$prefix}-#{$size} {
      #{$property}-left: $ratio * $spaceUnit;
      #{$property}-right: $ratio * $spaceUnit;
    }
    &#{$prefix}-0 {
      #{$property}: 0;
    }
  }
}

/* margins */
@mixin mediaAutoMargin($prefix) {

  &#{$prefix}-auto,
  &a#{$prefix}-auto {
    margin: auto;
  }
  &t#{$prefix}-auto {
    margin-top: auto;
  }
  &b#{$prefix}-auto {
    margin-bottom: auto;
  }
  &y#{$prefix}-auto {
    margin-top: auto;
    margin-bottom: auto;
  }
  &l#{$prefix}-auto {
    margin-left: auto;
  }
  &r#{$prefix}-auto {
    margin-right: auto;
  }
  &x#{$prefix}-auto {
    margin-left: auto;
    margin-right: auto;
  }
}

.m {
  @include mediaSpace('margin', '');
  @include mediaAutoMargin('');

  @include small-and-up {
    @include mediaSpace('margin', '-sm');
    @include mediaAutoMargin('-sm');
  }

  @include medium-and-up {
    @include mediaSpace('margin', '-md');
    @include mediaAutoMargin('-md');
  }

  @include large-and-up {
    @include mediaSpace('margin', '-lg');
    @include mediaAutoMargin('-lg');
  }

  @include extra-large-and-up {
    @include mediaSpace('margin', '-xl');
    @include mediaAutoMargin('-xl');
  }
}

/* paddings */
.p {
  @include mediaSpace('padding', '');

  @include small-and-up {
    @include mediaSpace('padding', '-sm');
  }

  @include medium-and-up {
    @include mediaSpace('padding', '-md');
  }

  @include large-and-up {
    @include mediaSpace('padding', '-lg');
  }

  @include extra-large-and-up {
    @include mediaSpace('padding', '-xl');
  }
}

/* offset */
.offset {
  @for $i from 1 through $columnsCount {
    &-#{$i} {
      @include offset($i);
    }
  }

  @include small-and-up {
    @for $i from 1 through $columnsCount {
      &-sm-#{$i} {
        @include offset($i);
      }
    }
  }

  @include medium-and-up {
    @for $i from 1 through $columnsCount {
      &-md-#{$i} {
        @include offset($i);
      }
    }
  }

  @include large-and-up {
    @for $i from 1 through $columnsCount {
      &-lg-#{$i} {
        @include offset($i);
      }
    }
  }

  @include extra-large-and-up {
    @for $i from 1 through $columnsCount {
      &-xl-#{$i} {
        @include offset($i);
      }
    }
  }
}

/* flex */
.d-flex {
  display: flex;
}
.direction {
  &-column {
    flex-direction: column;
    &-reverse {
      flex-direction: column-reverse;
    }
  }
  &-row {
    flex-direction: row;
    &-reverse {
      flex-direction: row-reverse;
    }
  }
}
.justify {
  &-start {
    justify-content: flex-start;
  }
  &-end {
    justify-content: flex-end;
  }
  &-center {
    justify-content: center;
  }
  &-between {
    justify-content: space-between;
  }
  &-around {
    justify-content: space-around;
  }
}
.align {
  &-start {
    align-items: flex-start;
  }
  &-right {
    align-items: flex-end;
  }
  &-center {
    align-items: center;
  }
  &-stretch {
    align-items: stretch;
  }
}
.grow {
  @for $i from 0 through 10 {
    &-#{$i} {
      flex-grow: $i;
    }
  }
}
.shrink {
  @for $i from 0 through 10 {
    &-#{$i} {
      flex-shrink: $i;
    }
  }
}

.visually-hidden {
	position: absolute !important;
	clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
	clip: rect(1px, 1px, 1px, 1px);
	padding:0 !important;
	border:0 !important;
	height: 1px !important;
	width: 1px !important;
  overflow: hidden;
  visibility: hidden;
  pointer-events: none;
}
